name: Create release with version number

on:
  workflow_dispatch:
    inputs:
      patchtype:
        type: choice
        description: Type of release
        # Input has to be provided for the workflow to run
        required: true
        options:
        # increment first version number
        - major
        # increment second version number
        - minor
        # increment third version number
        - patch
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  get-version:
    name: Find current version number
    runs-on: ubuntu-latest
    # Mapping outputs of first, second and third version numbers
    outputs:
      tag1: ${{ steps.describe1.outputs.tag }}
      tag2: ${{ steps.describe2.outputs.tag }}
      tag3: ${{ steps.describe3.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: echo "Current version number is $(git describe --tags)"
      - id: describe1
        run: echo "tag=$(git describe --tags 2> /dev/null | grep -o -E '[0-9]+' | sed -n '1p' || echo -n "0")" >> $GITHUB_OUTPUT
      - id: describe2
        run: echo "tag=$(git describe --tags 2> /dev/null | grep -o -E '[0-9]+' | sed -n '2p' || echo -n "0")" >> $GITHUB_OUTPUT
      - id: describe3
        run: echo "tag=$(git describe --tags 2> /dev/null | grep -o -E '[0-9]+' | sed -n '3p' || echo -n "0")" >> $GITHUB_OUTPUT          
  major-version:
    name: Modify first version number
    if: ${{ github.event.inputs.patchtype == 'major' }}
    runs-on: ubuntu-latest
    needs: get-version
    env:
      CURRENT_TAG1: ${{ needs.get-version.outputs.tag1 }}
    steps:
      - run: echo "Update major release"
      - id: update_tag1
        run: |
          echo "UPDATED_TAG1=$((++CURRENT_TAG1))" >> $GITHUB_ENV
      - id: create_release
        env:
           UPDATED_TAG: format('v{0}.{1}.{2}', $UPDATED_TAG1, '0', '0')
        run: |
          echo "Updated tag is $UPDATED_TAG"
          gh release create "$UPDATED_TAG"
  minor-version:
    name: Modify second version number
    if: ${{ github.event.inputs.patchtype == 'minor' }}
    runs-on: ubuntu-latest
    needs: get-version
    env:
      CURRENT_TAG2: ${{ needs.get-version.outputs.tag2 }}
    steps:
      - run: echo "Update minor release"
      - id: update_tag2
        run: |
          echo "UPDATED_TAG2=$((++CURRENT_TAG2))" >> $GITHUB_ENV
      - id: create_release
        env:
           UPDATED_TAG: format('v{0}.{1}.{2}', ${{ needs.get-version.outputs.tag1 }}, $UPDATED_TAG2, '0')
        run: |
          echo "Updated tag is $UPDATED_TAG"
          gh release create "$UPDATED_TAG"
  patch-version:
    name: Modify third version number
    if: ${{ github.event.inputs.patchtype == 'patch' }}
    runs-on: ubuntu-latest
    needs: get-version
    env:
      CURRENT_TAG3: ${{ needs.get-version.outputs.tag3 }}
    steps:
      - run: echo "Update patch release"
      - id: update_tag3
        run: |
          echo "UPDATED_TAG3=$((++CURRENT_TAG3))" >> $GITHUB_ENV
      - id: create_release
        env:
           UPDATED_TAG: format('v{0}.{1}.{2}', ${{ needs.get-version.outputs.tag1 }}, ${{ needs.get-version.outputs.tag2 }}, $UPDATED_TAG3)
        run: |
          echo "Updated tag is $UPDATED_TAG"
          gh release create "$UPDATED_TAG"
